package com.kuklin.manageapp.bots.bookingbot.telegram.handlers.bookingprocess;

import com.kuklin.manageapp.bots.bookingbot.entities.AvailabilityRule;
import com.kuklin.manageapp.bots.bookingbot.entities.BookingObject;
import com.kuklin.manageapp.bots.bookingbot.services.AvailabilityService;
import com.kuklin.manageapp.bots.bookingbot.services.BookingObjectService;
import com.kuklin.manageapp.bots.bookingbot.services.BookingService;
import com.kuklin.manageapp.bots.bookingbot.telegram.BookingTelegramBot;
import com.kuklin.manageapp.common.entities.TelegramUser;
import com.kuklin.manageapp.common.library.tgutils.Command;
import com.kuklin.manageapp.common.library.tgutils.TelegramKeyboard;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import static com.kuklin.manageapp.common.library.tgutils.TelegramKeyboard.DELIMETER;
import static com.kuklin.manageapp.common.library.tgutils.TelegramKeyboard.button;


@Component
@RequiredArgsConstructor
public class BookingTimeUpdateHandler implements com.kuklin.manageapp.bots.bookingbot.telegram.handlers.BookingUpdateHandler {
    private final AvailabilityService availabilityService;
    private final BookingService bookingService;
    private final BookingTelegramBot bookingTelegramBot;
    private final BookingUpdateHandler bookingUpdateHandler;
    private final BookingObjectService bookingObjectService;
    private static final String RESPONSE_MSG = "–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è \n‚è∞–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è: ";
    private static final String BACK_TXT = "–ù–∞–∑–∞–¥";
    private static final String BACK_CMD = Command.BOOKING_CALENDAR.getCommandText() + BookingTelegramBot.BOOKING_DELIMETER + "%s";

    /*
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ callback
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞
    –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏, –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
     */
    @Override
    public void handle(Update update, TelegramUser telegramUser) {
        //–†–∞–∑–±–∏–µ–Ω–∏–µ update –Ω–∞ –¥–∞–Ω–Ω—ã–µ
        CallbackQuery callbackQuery = update.getCallbackQuery();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        String data = callbackQuery.getData();

        //–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –±—Ä–æ–Ω–∏—Ä—É–µ–º–æ–≥–æ-–æ–±—ä–µ–∫—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        Long bookingObjectId = extractBookingObjecctId(data);

        //–ò–∑–ª–≤–µ—á–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –º–∞—Å—Å–∏–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {year, month, day}
        int[] yearMonthDay = extractYearMonthDay(data);
        //–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç—ã LocalDate
        LocalDate localDate = LocalDate.of(yearMonthDay[0], yearMonthDay[1], yearMonthDay[2]);
        //–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è —Ñ–æ—Ä–º–∞—Ç–∞ DayOfWeek, –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        DayOfWeek dayOfWeek = localDate.getDayOfWeek();

        /*
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª, –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
        –ü—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –û–Ω–∏ –º–æ–≥—É—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å.
        –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–∂–Ω–µ–µ –æ–±—ã—á–Ω—ã—Ö.
         */
        List<AvailabilityRule> rules = availabilityService.getAllBySpecificDate(localDate);

        //–ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª - –Ω–∞—Ö–æ–¥–∏–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        if (rules.isEmpty()) {
            //–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
            //–ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —Ä–∞–±–æ—á–∏–π, —Ç–æ –¥–æ —Å—é–¥–∞ –¥–æ–π—Ç–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ
            rules = availabilityService.getAllByDayOfWeek(dayOfWeek);
        }

        //–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        List<LocalTime[]> slots = processDates(rules, bookingObjectId, localDate);

        bookingTelegramBot.sendEditMessage(
                chatId,
                getResponseMsg(bookingObjectId, localDate),
                messageId,
                        //–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏.
                getTimeSlotsKeyboard(slots, localDate, bookingObjectId)
        );
    }

    private String getResponseMsg(Long bookingObjectId, LocalDate localDate) {
        BookingObject bookingObject = bookingObjectService
                .getByIdOrNull(bookingObjectId);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMMM yyyy", new Locale("ru"));

        StringBuilder sb = new StringBuilder();
        sb.append("‚ú® ").append(bookingObject.getName()).append(" ‚ú®").append("\n\n");
        sb.append("üìÖ ").append(localDate.format(formatter)).append("\n\n");
        sb.append(RESPONSE_MSG).append("\n");
        sb.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

        return sb.toString();
    }

    /*
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
     */
    private List<LocalTime[]> processDates(List<AvailabilityRule> specificRules, Long bookingObjectId, LocalDate localDate) {
        // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        LocalTime minStart = specificRules.stream()
                .map(AvailabilityRule::getStartTime)
                .min(LocalTime::compareTo)
                .orElse(null);

        LocalTime maxEnd = specificRules.stream()
                .map(AvailabilityRule::getEndTime)
                .max(LocalTime::compareTo)
                .orElse(null);

        // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥ —Å–ª–æ—Ç–∞ (–±–µ—Ä—ë–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)
        int slotMinutes = specificRules.stream()
                .map(AvailabilityRule::getSlotDurationMinutes)
                .max(Integer::compare)
                .orElse(AvailabilityRule.DEFAULT_INTERVAL); // –¥–µ—Ñ–æ–ª—Ç

        // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤, —Å —É—á–µ—Ç–æ–º —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        return bookingService.getAvailableSlots(bookingObjectId, localDate, minStart, maxEnd, slotMinutes);
    }


    /*
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –±—Ä–æ–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
     */
    private Long extractBookingObjecctId(String data) {
        String[] parts = data.split(BookingTelegramBot.BOOKING_DELIMETER);
        return Long.parseLong(parts[1]);
    }

    /*
    –ò–∑–ª–≤–µ—á–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –º–∞—Å—Å–∏–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {year, month, day}
     */
    private int[] extractYearMonthDay(String data) {
        //–û–∂–∏–¥–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, —Ñ–æ—Ä–º–∞—Ç–∞
        //chooseCommand + DATE + DELIMETER + year + DELIMETER + month + DELIMETER + day
        String[] parts = data.split(DELIMETER);

        Integer year = Integer.parseInt(parts[1]);
        Integer month = Integer.parseInt(parts[2]);
        Integer day = Integer.parseInt(parts[3]);

        return new int[] {year, month, day};
    }

    /*
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏.
     */
    private InlineKeyboardMarkup getTimeSlotsKeyboard(
            List<LocalTime[]> slots, LocalDate localDate, Long bookingObjectId
    ) {
        TelegramKeyboard.TelegramKeyboardBuilder builder = TelegramKeyboard.builder();

        int perRow = 3; // —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
        List<InlineKeyboardButton> currentRow = new ArrayList<>();

        for (int i = 0; i < slots.size(); i++) {
            LocalTime[] slot = slots.get(i);
            String label = slot[0] + "‚Äì" + slot[1]; // –Ω–∞–ø—Ä–∏–º–µ—Ä "09:00‚Äì09:30"
            String callbackData = bookingUpdateHandler.getHandlerListName() + BookingTelegramBot.BOOKING_DELIMETER + bookingObjectId + BookingTelegramBot.BOOKING_DELIMETER + DELIMETER + localDate + DELIMETER + label;

            currentRow.add(button(label, callbackData));

            if (currentRow.size() == perRow) {
                builder.row(currentRow);
                currentRow = new ArrayList<>();
            }
        }

        if (!currentRow.isEmpty()) {
            builder.row(currentRow);
        }
        builder.row(BACK_TXT, String.format(BACK_CMD, bookingObjectId));

        return builder.build();

    }

    @Override
    public String getHandlerListName() {
        return Command.BOOKING_BOOKTIME.getCommandText();
    }
}
